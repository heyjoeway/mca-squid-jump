<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="o,{~P!.toXN/Ux$cNjGM">tilemapCurrent</variable></variables><block type="function_definition" x="10" y="10"><mutation name="sfxWin" functionid="ufDFu@~egcHacknw]5+?"></mutation><field name="function_name">sfxWin</field><statement name="STACK"><block type="timer_background"><statement name="HANDLER"><block type="playMelody"><value name="melody"><shadow type="melody_editor"><field name="melody">"G5 -"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">500</field></shadow></value><next><block type="playMelody"><value name="melody"><shadow type="melody_editor"><field name="melody">"G5"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">550</field></shadow></value><next><block type="playMelody"><value name="melody"><shadow type="melody_editor"><field name="melody">"C6"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">150</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type="function_definition" x="10" y="10"><mutation name="sfxBlowfish" functionid="d6:~kljZo_C@a-29wk2i"></mutation><field name="function_name">sfxBlowfish</field><statement name="STACK"><block type="timer_background"><statement name="HANDLER"><block type="soundExpression_playSoundEffect"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Square</field><field name="effect">SoundExpressionEffect.None</field><field name="interpolation">InterpolationCurve.Linear</field><value name="startFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">2437</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">2482</field></shadow></value><value name="duration"><shadow type="math_number_minmax"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">100</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">74</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">43</field></shadow></value></shadow></value></block></statement><next><block type="timer_background"><statement name="HANDLER"><block type="soundExpression_playSoundEffect"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Square</field><field name="effect">SoundExpressionEffect.Vibrato</field><field name="interpolation">InterpolationCurve.Linear</field><value name="startFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">208</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">565</field></shadow></value><value name="duration"><shadow type="math_number_minmax"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">500</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">88</field></shadow></value></shadow></value></block></statement></block></next></block></statement></block><block type="forever" x="10" y="10"><statement name="HANDLER"><block type="scroller_setBackgroundScrollOffset"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><comment pinned="false" h="80" w="160">Adjust BG pos</comment><value name="x"><shadow type="math_number"><field name="NUM">0</field></shadow></value><value name="y"><block type="function_call_output"><mutation name="getBGPos" functionid="AyA0(oi--r!,bmsCZAJP"></mutation></block></value></block></statement></block><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="variables_set"><field name="VAR" id="o,{~P!.toXN/Ux$cNjGM">tilemapCurrent</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="tiles_tilemap_editor"><field name="tilemap">tilemap`level`</field><data>{"commentRefs":[],"fieldData":{"tilemap":"level1"}}</data></block></value><next><block type="set_current_tilemap"><value name="tilemap"><shadow type="tiles_tilemap_editor"></shadow><block type="variables_get"><field name="VAR" id="o,{~P!.toXN/Ux$cNjGM">tilemapCurrent</field></block></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjSquiddy {" line1="    defaultImg = assets.animation`squid`[0];" line2="    sprite: Sprite = null;" line3="    timeJumpStart = 0;" line4="    stopped = false;" line5="" line6="    constructor() {" line7="        this.sprite = sprites.create(this.defaultImg, SpriteKind.Player);" line8="        this.sprite.setStayInScreen(false);" line9="" line10="        this.sprite.ay = 225       " line11="        this.sprite.y = tilemapCurrent.height * 16 - 8" line12="        this.sprite.x = 6 * 16;" line13="" line14="        // Squid jump anim start" line15="        controller.A.onEvent(" line16="            ControllerButtonEvent.Pressed," line17="            () =&gt; this.startJump()" line18="        );" line19="        controller.A.onEvent(" line20="            ControllerButtonEvent.Released," line21="            () =&gt; this.releaseJump()" line22="        );" line23="" line24="        forever(() =&gt; this.loop());" line25="    }" line26="" line27="    startJump() {" line28="        if (this.stopped) return;" line29="" line30="        timer.background(() =&gt; {" line31="            animation.runImageAnimation(" line32="                this.sprite," line33="                assets.animation`squid`," line34="                100," line35="                false" line36="            );" line37="            pause(1000);" line38="            if (this.stopped) return;" line39="            if (!controller.A.isPressed()) return;" line40="            animation.runImageAnimation(" line41="                this.sprite," line42="                assets.animation`squid-charged`," line43="                80," line44="                true" line45="            );" line46="        });" line47="        this.timeJumpStart = game.runtime();" line48="    }" line49="" line50="    releaseJump() {" line51="        if (this.stopped) return;" line52="" line53="        animation.stopAnimation(" line54="            animation.AnimationTypes.ImageAnimation," line55="            this.sprite" line56="        );" line57="        this.sprite.setImage(this.defaultImg)" line58="" line59="        // Need to be on ground" line60="        if (!this.sprite.isHittingTile(CollisionDirection.Bottom))" line61="            return;" line62="" line63="        let jumpPowerMax = -250 // vy" line64="        let jumpChargeTimeMax = 1000.0 // milliseconds" line65="        let jumpPower = (Math.min(" line66="            game.runtime() - this.timeJumpStart," line67="            jumpChargeTimeMax" line68="        ) / jumpChargeTimeMax) * jumpPowerMax" line69="        this.sprite.vy = Math.min(this.sprite.vy, jumpPower)" line70="" line71="        music.playSoundEffect(" line72="            music.createSoundEffect(WaveShape.Square, 1902, 253, 88, 7, 250, SoundExpressionEffect.Tremolo, InterpolationCurve.Logarithmic)," line73="            SoundExpressionPlayMode.UntilDone" line74="        );" line75="    }" line76="" line77="    loopCamera() {" line78="        scene.centerCameraAt(6 * 16, this.sprite.y);" line79="    }" line80="" line81="    loopBounds() {" line82="        let leftBound = 8;" line83="        let rightBound = leftBound * 2 + screen.width;" line84="        if (this.sprite.x &lt; leftBound) this.sprite.x = rightBound;" line85="        else if (this.sprite.x &gt; rightBound) this.sprite.x = leftBound;" line86="    }" line87="" line88="    stop() {" line89="        this.stopped = true;" line90="        this.sprite.vx = 0;" line91="        this.sprite.vy = 0;" line92="        this.sprite.ax = 0;" line93="        this.sprite.ay = 0;" line94="    }" line95="" line96="    win() {" line97="        this.stop();" line98="        sfxWin();" line99="        " line100="        let bgSprite = sprites.create(assets.image`winBg`, SpriteKind.Text);" line101="        bgSprite.x = scene.cameraLeft() + (screen.width / 2);" line102="        bgSprite.y = scene.cameraTop() + (screen.height / 2);" line103="" line104="        let textItems = [" line105="            { x: 0, y: -12, text: &quot;GOAL!&quot; }," line106="            { x: 0, y: 0, text: &quot;STAGE BONUS 300&quot; }," line107="            { x: 0, y: 12, text: &quot;TIME BONUS 100&quot; }" line108="        ];" line109="" line110="        textItems.forEach(item =&gt; {" line111="            let textSprite = textsprite.create(item.text);" line112="            textSprite.x = item.x + scene.cameraLeft() + (screen.width / 2);" line113="            textSprite.y = item.y + scene.cameraTop() + (screen.height / 2);" line114="            textSprite.setMaxFontHeight(6);" line115="        });" line116="    }" line117="" line118="    getBlowfish(tileLocation: tiles.Location) {" line119="        sfxBlowfish();" line120="        tiles.setTileAt(tileLocation, assets.tile`blank`);" line121="        this.sprite.vy = -300;" line122="    }" line123="" line124="    loopTiles() {" line125="        let tileLocation = this.sprite.tilemapLocation();" line126="" line127="        if (tiles.tileAtLocationEquals(tileLocation, assets.tile`zapfish`))" line128="            this.win();" line129="        else if (tiles.tileAtLocationEquals(tileLocation, assets.tile`blowfish`))" line130="            this.getBlowfish(tileLocation);" line131="    }" line132="" line133="    loop() {" line134="        if (this.stopped) return;" line135="" line136="        if (this.sprite.vy &lt; 0) {" line137="            this.sprite.setFlag(SpriteFlag.GhostThroughWalls, true);" line138="        } else {" line139="            this.sprite.setFlag(SpriteFlag.GhostThroughWalls, false);" line140="        }" line141="" line142="        let squiddyAcc = 100;" line143="        if (this.sprite.isHittingTile(CollisionDirection.Bottom)) {" line144="            this.sprite.ax = 0;" line145="            this.sprite.vx = 0;" line146="        } if (controller.left.isPressed())" line147="            this.sprite.ax = -squiddyAcc;" line148="        else if (controller.right.isPressed())" line149="            this.sprite.ax = squiddyAcc;" line150="        else" line151="            this.sprite.ax = 0;" line152="" line153="        this.loopBounds();" line154="        this.loopCamera();" line155="        this.loopTiles();" line156="    }" line157="}" numlines="158"></mutation><next><block type="gamesetbackgroundimage"><value name="img"><shadow type="background_image_picker"><field name="img">assets.image`bg`</field><data>{"commentRefs":[],"fieldData":{"img":"myImages.image1"}}</data></shadow></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let squiddy = new ObjSquiddy();" numlines="1" declaredvars="squiddy"></mutation></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" x="612" y="6033"><mutation name="getBGPos" functionid="AyA0(oi--r!,bmsCZAJP"></mutation><field name="function_name">getBGPos</field><statement name="STACK"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="cameraproperty"><field name="property">CameraProperty.Y</field></block></value></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic"><field name="OP">DIVIDE</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="arcade_game_runtime"></block></value><value name="B"><shadow type="math_number"><field name="NUM">100</field></shadow></value></block></value></block></value></block></statement></block></xml>