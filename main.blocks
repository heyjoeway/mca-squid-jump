<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="k+/[,[jQvy#6W|*O/DP{">tilemapCurrentName</variable></variables><block type="pxt-on-start" id="v2%X=%3_/49RobvcdEyP" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Ww}.f@FWAiQAuG[K*-qc" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let tilemapCurrent: tiles.TileMapData = null" numlines="1" declaredvars="tilemapCurrent"></mutation><next><block type="typescript_statement" id="4[CITPv+dXc$-=JYKgNU" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ForeverStopable {" line1="    stopped = false;" line2="" line3="    constructor(func: Function) {" line4="        timer.background(() =&gt; {" line5="            while (!this.stopped) {" line6="                func();" line7="                pause(16);" line8="            }" line9="        })" line10="    }" line11="" line12="    stop() { this.stopped = true; }" line13="}" numlines="14"></mutation><next><block type="typescript_statement" id="JVN$s-;DhKx6.F@sd1Ju" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum CleanupStatus {" line1="    NONE," line2="    QUEUED," line3="    DONE" line4="}" numlines="5"></mutation><next><block type="typescript_statement" id="L:Z1bTY-~b97*Bya7*N0" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Obj {" line1="    stopped = false;" line2="    _cleanupStatus: CleanupStatus = CleanupStatus.NONE;" line3="    loopRunner: ForeverStopable = null;" line4="" line5="    constructor() {" line6="        this.loopRunner = new ForeverStopable(() =&gt; {" line7="            this.loop()" line8="        });" line9="    }" line10="" line11="    loop() { }" line12="    stop() {" line13="        this.stopped = true;" line14="        this.loopRunner.stop();" line15="    }" line16="    destroy() {" line17="        this.stop();" line18="        // if (this._cleanupStatus == CleanupStatus.NONE)" line19="            // this._cleanupStatus = CleanupStatus.QUEUED;" line20="        // if (this._cleanupStatus == CleanupStatus.QUEUED)" line21="        return this._cleanup();" line22="    }" line23="    _cleanup() {" line24="        // this._cleanupStatus = CleanupStatus.DONE;" line25="    }" line26="}" numlines="27"></mutation><next><block type="typescript_statement" id="#zODP6XUsPr6_L..Mmme" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjWater extends Obj {" line1="    sprite: Sprite = null; " line2="    position = 0;" line3="" line4="    constructor() {" line5="        super();" line6="        this.sprite = sprites.create(" line7="            assets.image`water`," line8="            SpriteKind.Enemy" line9="        );" line10="        this.position = (tilemapCurrent.height * 16) * 1.5;" line11="        this.sprite.x = 6 * 16;" line12="    }" line13="" line14="    loop() {" line15="        // Workaround for rounding error (?)" line16="        this.position -= 45 / 60;" line17="        this.sprite.y = this.position;" line18="    }" line19="" line20="    _cleanup() {" line21="        super._cleanup();" line22="        this.sprite.destroy();" line23="    }" line24="}" numlines="25"></mutation><next><block type="typescript_statement" id="xyK6$U+9P(x=,hnRX|!(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjSparkle extends Obj {" line1="    player: ObjSquiddy = null;" line2="    sprite: Sprite = null;" line3="" line4="    constructor(player: ObjSquiddy) {" line5="        super();" line6="        this.player = player;" line7="        let anim = assets.animation`sparkle`;" line8="        this.sprite = sprites.create(" line9="            anim[0]," line10="            SpriteKind.Text" line11="        );" line12="        animation.runImageAnimation(" line13="            this.sprite," line14="            anim," line15="            200, // interval" line16="            true // loop" line17="        )" line18="    }" line19="" line20="    loop() {" line21="        let parent = this.player.sprite;" line22="        this.sprite.setPosition(parent.x, parent.y);" line23="        if (!this.player.hasAirJump()) this.stop();" line24="    }" line25="" line26="    stop() {" line27="        super.stop();" line28="        this.sprite.destroy();" line29="    }" line30="" line31="    _cleanup() {" line32="        super._cleanup();" line33="        this.sprite.destroy();" line34="    }" line35="}" numlines="36"></mutation><next><block type="typescript_statement" id="Q3bgFW.yk;`FYdH)]tKr" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjSquiddy extends Obj {" line1="    defaultImg = assets.animation`squid`[0];" line2="    sprite: Sprite = null;" line3="    timeJumpStart = 0;" line4="" line5="    constructor() {" line6="        super();" line7="" line8="        this.sprite = sprites.create(this.defaultImg, SpriteKind.Player);" line9="        this.sprite.setStayInScreen(false);" line10="" line11="        this.sprite.ay = 225       " line12="        this.sprite.y = tilemapCurrent.height * 16 - 8" line13="        this.sprite.x = 6 * 16;" line14="" line15="        // Squid jump anim start" line16="        controller.A.onEvent(" line17="            ControllerButtonEvent.Pressed," line18="            () =&gt; this.startJump()" line19="        );" line20="        controller.A.onEvent(" line21="            ControllerButtonEvent.Released," line22="            () =&gt; this.releaseJump()" line23="        );" line24="    }" line25="" line26="    startJump() {" line27="        if (this.stopped) return;" line28="" line29="        timer.background(() =&gt; {" line30="            animation.runImageAnimation(" line31="                this.sprite," line32="                assets.animation`squid`," line33="                100," line34="                false" line35="            );" line36="            pause(1000);" line37="            if (this.stopped) return;" line38="            if (this.timeJumpCharge() &lt; 1000 - 16) return; // Give 1 frame leeway, just in case" line39="            if (!controller.A.isPressed()) return;" line40="            animation.runImageAnimation(" line41="                this.sprite," line42="                assets.animation`squid-charged`," line43="                80," line44="                true" line45="            );" line46="        });" line47="        this.timeJumpStart = game.runtime();" line48="    }" line49="" line50="    airJumpTime = -Infinity;" line51="    airJumpTimeMax = 10 * 1000;" line52="    airJumpCount = 0;" line53="    airJumpCountMax = 1;" line54="" line55="    hasAirJump() {" line56="        return game.runtime() - this.airJumpTime &lt; this.airJumpTimeMax" line57="    }" line58="" line59="    canAirJump() {" line60="        return this.hasAirJump() &amp;&amp; (this.airJumpCount &lt; this.airJumpCountMax);" line61="    }" line62="" line63="    onGround() {" line64="        return this.sprite.isHittingTile(CollisionDirection.Bottom)" line65="    }" line66="" line67="    timeJumpCharge() {" line68="        return game.runtime() - this.timeJumpStart;" line69="    }" line70="" line71="    releaseJump() {" line72="        if (this.stopped) return;" line73="" line74="        animation.stopAnimation(" line75="            animation.AnimationTypes.ImageAnimation," line76="            this.sprite" line77="        );" line78="        this.sprite.setImage(this.defaultImg)" line79="" line80="        // Need to be on ground (unless air jump active)" line81="        if (!this.canAirJump()) {" line82="            if (!this.onGround())" line83="                return;" line84="        }" line85="" line86="        if (!this.onGround() &amp;&amp; this.canAirJump())" line87="            this.airJumpCount++;" line88="" line89="        let jumpPowerMax = -250 // vy" line90="        let jumpChargeTimeMax = 1000.0 // milliseconds" line91="        let jumpPower = (Math.min(" line92="            this.timeJumpCharge()," line93="            jumpChargeTimeMax" line94="        ) / jumpChargeTimeMax) * jumpPowerMax" line95="        this.sprite.vy = Math.min(this.sprite.vy, jumpPower)" line96="" line97="        music.playSoundEffect(" line98="            music.createSoundEffect(WaveShape.Square, 1902, 253, 88, 7, 250, SoundExpressionEffect.Tremolo, InterpolationCurve.Logarithmic)," line99="            SoundExpressionPlayMode.UntilDone" line100="        );" line101="    }" line102="" line103="    loopCamera() {" line104="        scene.centerCameraAt(6 * 16, this.sprite.y);" line105="    }" line106="" line107="    loopBounds() {" line108="        let leftBound = 8;" line109="        let rightBound = leftBound * 2 + screen.width;" line110="        if (this.sprite.x &lt; leftBound) this.sprite.x = rightBound;" line111="        else if (this.sprite.x &gt; rightBound) this.sprite.x = leftBound;" line112="    }" line113="" line114="    stop() {" line115="        super.stop();" line116="        this.sprite.vx = 0;" line117="        this.sprite.vy = 0;" line118="        this.sprite.ax = 0;" line119="        this.sprite.ay = 0;" line120="    }" line121="" line122="    win() {" line123="        this.stop();" line124="        sfxWin();" line125="        " line126="        let bgSprite = sprites.create(assets.image`winBg`, SpriteKind.Text);" line127="        bgSprite.x = scene.cameraLeft() + (screen.width / 2);" line128="        bgSprite.y = scene.cameraTop() + (screen.height / 2);" line129="" line130="        let textItems = [" line131="            { x: 0, y: -12, text: &quot;GOAL!&quot; }," line132="            { x: 0, y: 0, text: &quot;STAGE BONUS 300&quot; }," line133="            { x: 0, y: 12, text: &quot;TIME BONUS 100&quot; }" line134="        ];" line135="" line136="        textItems.forEach(item =&gt; {" line137="            let textSprite = textsprite.create(item.text);" line138="            textSprite.x = item.x + scene.cameraLeft() + (screen.width / 2);" line139="            textSprite.y = item.y + scene.cameraTop() + (screen.height / 2);" line140="            textSprite.setMaxFontHeight(6);" line141="        });" line142="" line143="        timer.background(() =&gt; {" line144="            pause(5000);" line145="            gameMode.destroy();" line146="            gameMode = new ObjGameModeMain(tilemapCurrent);" line147="        })" line148="    }" line149="" line150="    getJellyfish(tileLocation: tiles.Location) {" line151="        tiles.setTileAt(tileLocation, assets.tile`blank`);" line152="        sfxJellyfish();" line153="        this.airJumpTime = game.runtime();" line154="        this.airJumpCount = 0;" line155="        new ObjSparkle(this);" line156="    }" line157="" line158="    getBlowfish(tileLocation: tiles.Location) {" line159="        tiles.setTileAt(tileLocation, assets.tile`blank`);" line160="        sfxBlowfish();" line161="        this.sprite.vy = -300;" line162="    }" line163="" line164="    loopTiles() {" line165="        let tileLocation = this.sprite.tilemapLocation();" line166="" line167="        if (tiles.tileAtLocationEquals(tileLocation, assets.tile`zapfish`))" line168="            this.win();" line169="        else if (tiles.tileAtLocationEquals(tileLocation, assets.tile`blowfish`))" line170="            this.getBlowfish(tileLocation);" line171="        else if (tiles.tileAtLocationEquals(tileLocation, assets.tile`jellyfish`))" line172="            this.getJellyfish(tileLocation);" line173="    }" line174="" line175="    loop() {" line176="        if (this.sprite.vy &lt; 0) {" line177="            this.sprite.setFlag(SpriteFlag.GhostThroughWalls, true);" line178="        } else {" line179="            this.sprite.setFlag(SpriteFlag.GhostThroughWalls, false);" line180="        }" line181="" line182="        let squiddyAcc = 100;" line183="        if (this.sprite.isHittingTile(CollisionDirection.Bottom)) {" line184="            this.sprite.ax = 0;" line185="            this.sprite.vx = 0;" line186="            this.airJumpCount = 0;" line187="        } if (controller.left.isPressed())" line188="            this.sprite.ax = -squiddyAcc;" line189="        else if (controller.right.isPressed())" line190="            this.sprite.ax = squiddyAcc;" line191="        else" line192="            this.sprite.ax = 0;" line193="" line194="        this.loopBounds();" line195="        this.loopCamera();" line196="        this.loopTiles();" line197="    }" line198="" line199="    _cleanup() {" line200="        super._cleanup();" line201="        this.sprite.destroy();" line202="    }" line203="}" numlines="204"></mutation><next><block type="variables_set" id="|+^s$1+E+v*Kfp~v~yF-"><field name="VAR" id="k+/[,[jQvy#6W|*O/DP{">tilemapCurrentName</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="s2/VBxY[{VHskwb)3D5H"><field name="TEXT">level</field></block></value><next><block type="typescript_statement" id="[gHjkJ1Xy,u`aJ*LWK-Z" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjGameModeMain extends Obj {" line1="    squiddy: ObjSquiddy = null;" line2="    water: ObjWater = null;" line3="" line4="    constructor(tilemap: tiles.TileMapData) {" line5="        super();" line6="        " line7="        tilemapCurrent = assets.tilemap(`level`);" line8="        tiles.setCurrentTilemap(tilemapCurrent);" line9="        scene.setBackgroundImage(assets.image`bg`);" line10="        this.squiddy = new ObjSquiddy();" line11="        this.water = new ObjWater();" line12="    }" line13="" line14="    getBGPos() {" line15="        return 0 - scene.cameraProperty(CameraProperty.Y) + game.runtime() / 100" line16="    }" line17="" line18="    loop() {" line19="        scroller.setBackgroundScrollOffset(0, this.getBGPos())" line20="    }" line21="" line22="    _cleanup() {" line23="        super._cleanup();" line24="        this.squiddy.destroy();" line25="        this.water.destroy();" line26="    }" line27="}" numlines="28"></mutation><next><block type="typescript_statement" id="p`lH#@A~jATA%dFK,m9@" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let gameMode = new ObjGameModeMain(assets.tilemap`level`);" numlines="1" declaredvars="gameMode"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="ey|}v/n_/iyh5J:d*zPh" x="613" y="9889"><mutation name="sfxWin" functionid="U$o2ilO8w`Uj!Hqzk{$x"></mutation><field name="function_name">sfxWin</field><statement name="STACK"><block type="timer_background" id="XSb^{la@qC:*8o=(1(4h"><statement name="HANDLER"><block type="playMelody" id="nui~QR*_MGAzxzVJ.U{q"><value name="melody"><shadow type="melody_editor" id="(Zg3`ntJ@t|^UaX(!`Nh"><field name="melody">"G5 -"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax" id="22tjEiZ=v;2|@U9M5;[l"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">500</field></shadow></value><next><block type="playMelody" id="%Gy!1sUr,vK0c2*lCjWb"><value name="melody"><shadow type="melody_editor" id="8B{zT0*PbVN#Zsehx}H`"><field name="melody">"G5"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax" id="FRk*|(FZwKw](Fbo-t(4"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">550</field></shadow></value><next><block type="playMelody" id="]A/;)VQeRmb`V`q#K+E~"><value name="melody"><shadow type="melody_editor" id="X$tFe6+@FC@qK)rhOT(d"><field name="melody">"C6"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax" id="{!!awTG=c%/8II2G;!e#"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">150</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type="function_definition" id="p20{tFyqVVDDl1xVc5|2" x="0" y="10296"><mutation name="sfxJellyfish" functionid="nr9Z[@#;,4}Rq%lVV0-0"></mutation><field name="function_name">sfxJellyfish</field><statement name="STACK"><block type="timer_background" id=")p2om(X0]{oR%36wTViu"><statement name="HANDLER"><block type="soundExpression_playSoundEffect" id="f%yKm}-EuQV-!?xEEecM"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect" id="W}-NE}E/Ezoe$%C^*0=6" inline="true"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Square</field><field name="effect">SoundExpressionEffect.None</field><field name="interpolation">InterpolationCurve.Linear</field><value name="startFrequency"><shadow type="math_number_minmax" id="#:G%R4cBi={]j+Jc(.Io"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">2437</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax" id=",c:ab3SldTjs{MSQ!7UI"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">2482</field></shadow></value><value name="duration"><shadow type="math_number_minmax" id="#BW9;%VnaOxE3u*]j}k7"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">100</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax" id="v5pcO;IFjqAQ{aPY,hD,"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">74</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax" id="a4hy.]o#[}EH?0uo|^yh"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">43</field></shadow></value></shadow></value></block></statement></block></statement></block><block type="function_definition" id="#$YYoc*%Q9c2Gv`CKS#R" x="558" y="10296"><mutation name="sfxBlowfish" functionid="WDL9318WeU/@9$mZgvX!"></mutation><field name="function_name">sfxBlowfish</field><statement name="STACK"><block type="function_call" id="@bcn#xCaa2CD4Nk4WMLZ"><mutation name="sfxJellyfish" functionid="nr9Z[@#;,4}Rq%lVV0-0"></mutation><next><block type="timer_background" id="vy3tfj@6`LVXX(u,Ga`K"><statement name="HANDLER"><block type="soundExpression_playSoundEffect" id="yBt{TK#J_QuI]d}|t-ZM"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect" id="/%!Hq7HsUQU-dh)96|)2" inline="true"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Square</field><field name="effect">SoundExpressionEffect.Vibrato</field><field name="interpolation">InterpolationCurve.Linear</field><value name="startFrequency"><shadow type="math_number_minmax" id="2sX}oM(^).YH:88FSX+K"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">208</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax" id="gc]W3h!HP2G:^x{%I]}m"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">565</field></shadow></value><value name="duration"><shadow type="math_number_minmax" id="^288xq~G92#jp(C-}$#T"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">500</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax" id=",BJEW_y)DkTb|}!3aO.q"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax" id="+S=bT,4aoGmpx`X.#=q?"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">88</field></shadow></value></shadow></value></block></statement></block></next></block></statement></block></xml>