<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="d6c+lmn.9Hn$_5/uW{V,">count2</variable><variable id="=oz0Km#pwJS6R`MCr@9g">result</variable><variable id="nE^:?4Qn{.@~^R/Kq7[R">level</variable><variable id="klAFm.v#X6.;ny:HJC2%">lives</variable><variable id="Y399|z3{1^Lt|vtz/t-Y">hiscore</variable><variable id="J*Mu#(oKkr)O.D5^z*AM">tilemapCurrentName</variable></variables><block type="function_definition" x="10" y="10"><mutation name="sfxJellyfish" functionid="f/],NV;5T[=EG(gI-|UG"></mutation><field name="function_name">sfxJellyfish</field><statement name="STACK"><block type="timer_background"><statement name="HANDLER"><block type="soundExpression_playSoundEffect"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Square</field><field name="effect">SoundExpressionEffect.None</field><field name="interpolation">InterpolationCurve.Linear</field><value name="startFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">2437</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">2482</field></shadow></value><value name="duration"><shadow type="math_number_minmax"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">100</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">74</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">43</field></shadow></value></shadow></value></block></statement></block></statement></block><block type="function_definition" x="10" y="10"><mutation name="sfxMiss" functionid="s_v=8!P5Io!}2]DPFm#U"></mutation><field name="function_name">sfxMiss</field><statement name="STACK"><block type="timer_background"><statement name="HANDLER"><block type="soundExpression_playSoundEffect"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Sawtooth</field><field name="effect">SoundExpressionEffect.Vibrato</field><field name="interpolation">InterpolationCurve.Logarithmic</field><value name="startFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">90</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">46</field></shadow></value><value name="duration"><shadow type="math_number_minmax"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">100</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value></shadow></value><next><block type="device_pause"><value name="pause"><shadow type="timePicker"><field name="ms">50</field></shadow></value><next><block type="soundExpression_playSoundEffect"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Sawtooth</field><field name="effect">SoundExpressionEffect.Vibrato</field><field name="interpolation">InterpolationCurve.Logarithmic</field><value name="startFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">90</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">46</field></shadow></value><value name="duration"><shadow type="math_number_minmax"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">200</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value></shadow></value></block></next></block></next></block></statement></block></statement></block><block type="function_definition" x="10" y="10"><mutation name="repeatChar" functionid="2i$mJ$55m~)**lOa-?7A"><arg name="count" id="tc78hdkz209qtgcnz4w83" type="number"></arg><arg name="ch" id="4681bkqof3ph1yq1yneb" type="string"></arg></mutation><field name="function_name">repeatChar</field><statement name="STACK"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">count</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block></value><statement name="DO0"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text"><field name="TEXT"></field></block></value></block></statement><next><block type="variables_set"><field name="VAR" id="d6c+lmn.9Hn$_5/uW{V,">count2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic"><field name="OP">DIVIDE</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">count</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">2</field></shadow></value></block></value><next><block type="variables_set"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_string"><field name="VALUE">ch</field></block></value><next><block type="device_while"><value name="COND"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">LTE</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text_length"><value name="VALUE"><block type="variables_get"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field></block></value></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="d6c+lmn.9Hn$_5/uW{V,">count2</field></block></value></block></value><statement name="DO"><block type="variables_set"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text_join"><mutation items="2"></mutation><value name="ADD0"><shadow type="text"><field name="TEXT"></field></shadow><block type="variables_get"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field></block></value><value name="ADD1"><shadow type="text"><field name="TEXT"></field></shadow><block type="variables_get"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field></block></value></block></value></block></statement><next><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text_join"><mutation items="2"></mutation><value name="ADD0"><shadow type="text"><field name="TEXT"></field></shadow><block type="variables_get"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field></block></value><value name="ADD1"><shadow type="text"><field name="TEXT"></field></shadow><block type="lists_index_get"><value name="LIST"><block type="variables_get"><field name="VAR" id="=oz0Km#pwJS6R`MCr@9g">result</field></block></value><value name="INDEX"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" editable="false"><field name="EXPRESSION">0, count - result.length - 1</field></block></value></block></value></block></value></block></next></block></next></block></next></block></next></block></statement></block><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let tilemapCurrent: tiles.TileMapData = null" numlines="1" declaredvars="tilemapCurrent"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let hiscore = 0" numlines="1" declaredvars="hiscore"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let score = 0" numlines="1" declaredvars="score"></mutation><next><block type="variables_set"><field name="VAR" id="nE^:?4Qn{.@~^R/Kq7[R">level</field><value name="VALUE"><shadow type="math_number"><field name="NUM">1</field></shadow></value><next><block type="variables_set"><field name="VAR" id="klAFm.v#X6.;ny:HJC2%">lives</field><value name="VALUE"><shadow type="math_number"><field name="NUM">2</field></shadow></value><next><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="block_settings_exists"><value name="name"><shadow type="text"><field name="TEXT">hiscore</field></shadow></value></block></value><statement name="DO0"><block type="variables_set"><field name="VAR" id="Y399|z3{1^Lt|vtz/t-Y">hiscore</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="block_settings_read_number"><value name="name"><shadow type="text"><field name="TEXT">hiscore</field></shadow></value></block></value></block></statement><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ForeverStopable {" line1="    stopped = false;" line2="" line3="    constructor(func: Function) {" line4="        timer.background(() =&gt; {" line5="            while (!this.stopped) {" line6="                func();" line7="                pause(16);" line8="            }" line9="        })" line10="    }" line11="" line12="    stop() { this.stopped = true; }" line13="}" numlines="14"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Obj {" line1="    stopped = false;" line2="    loopRunner: ForeverStopable = null;" line3="" line4="    constructor() {" line5="        this.loopRunner = new ForeverStopable(() =&gt; {" line6="            this.loop()" line7="        });" line8="    }" line9="" line10="    loop() { }" line11="    stop() {" line12="        this.stopped = true;" line13="        this.loopRunner.stop();" line14="    }" line15="    destroy() {" line16="        this.stop();" line17="        this._cleanup();" line18="    }" line19="    _cleanup() { }" line20="}" numlines="21"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjWater extends Obj {" line1="    sprite: Sprite = null; " line2="    position = 0;" line3="" line4="    constructor() {" line5="        super();" line6="        this.sprite = sprites.create(" line7="            assets.image`water`," line8="            SpriteKind.Enemy" line9="        );" line10="        this.position = (tilemapCurrent.height * 16) * 1.5;" line11="        this.sprite.x = 6 * 16;" line12="    }" line13="" line14="    loop() {" line15="        // Workaround for rounding error (?)" line16="        this.position -= 45 / 60;" line17="        this.sprite.y = this.position;" line18="    }" line19="" line20="    _cleanup() {" line21="        super._cleanup();" line22="        this.sprite.destroy();" line23="    }" line24="}" numlines="25"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjSparkle extends Obj {" line1="    player: ObjSquiddy = null;" line2="    sprite: Sprite = null;" line3="" line4="    constructor(player: ObjSquiddy) {" line5="        super();" line6="        this.player = player;" line7="        let anim = assets.animation`sparkle`;" line8="        this.sprite = sprites.create(" line9="            anim[0]," line10="            SpriteKind.Text" line11="        );" line12="        animation.runImageAnimation(" line13="            this.sprite," line14="            anim," line15="            200, // interval" line16="            true // loop" line17="        )" line18="    }" line19="" line20="    loop() {" line21="        let parent = this.player.sprite;" line22="        this.sprite.setPosition(parent.x, parent.y);" line23="        if (!this.player.hasAirJump()) this.stop();" line24="    }" line25="" line26="    stop() {" line27="        super.stop();" line28="        this.sprite.destroy();" line29="    }" line30="" line31="    _cleanup() {" line32="        super._cleanup();" line33="        this.sprite.destroy();" line34="    }" line35="}" numlines="36"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjSquiddy extends Obj {" line1="    defaultImg = assets.animation`squid`[0];" line2="    sprite: Sprite = null;" line3="    timeJumpStart = 0;" line4="    timeStart = 0;" line5="" line6="    constructor() {" line7="        super();" line8="" line9="        this.timeStart = game.runtime();" line10="" line11="        this.sprite = sprites.create(this.defaultImg, SpriteKind.Player);" line12="        this.sprite.setStayInScreen(false);" line13="" line14="        this.sprite.ay = 225       " line15="        this.sprite.y = tilemapCurrent.height * 16 - 40" line16="        this.sprite.x = 6 * 16;" line17="" line18="        // Squid jump anim start" line19="        controller.A.onEvent(" line20="            ControllerButtonEvent.Pressed," line21="            () =&gt; this.startJump()" line22="        );" line23="        controller.A.onEvent(" line24="            ControllerButtonEvent.Released," line25="            () =&gt; this.releaseJump()" line26="        );" line27="        sprites.onOverlap(" line28="            SpriteKind.Player," line29="            SpriteKind.Enemy," line30="            (sprite: Sprite, otherSprite: Sprite) =&gt; {" line31="                if (sprite != this.sprite) return;" line32="                if (this.stopped) return;" line33="                gameMode.stop();" line34="                new ObjMsgMiss();" line35="            }" line36="        );" line37="" line38="        // Hack to fix camera jitter :)" line39="        game.currentScene().eventContext.registerFrameHandler(" line40="            15," line41="            () =&gt; this.loopCamera()" line42="        );" line43="    }" line44="" line45="    time() {" line46="        return game.runtime() - this.timeStart;" line47="    }" line48="" line49="    startJump() {" line50="        if (this.stopped) return;" line51="" line52="        timer.background(() =&gt; {" line53="            animation.runImageAnimation(" line54="                this.sprite," line55="                assets.animation`squid`," line56="                100," line57="                false" line58="            );" line59="            pause(1000);" line60="            if (this.stopped) return;" line61="            if (this.timeJumpCharge() &lt; 1000 - 16) return; // Give 1 frame leeway, just in case" line62="            if (!controller.A.isPressed()) return;" line63="            animation.runImageAnimation(" line64="                this.sprite," line65="                assets.animation`squid-charged`," line66="                80," line67="                true" line68="            );" line69="        });" line70="        this.timeJumpStart = game.runtime();" line71="    }" line72="" line73="    airJumpTime = -Infinity;" line74="    airJumpTimeMax = 10 * 1000;" line75="    airJumpCount = 0;" line76="    airJumpCountMax = 1;" line77="" line78="    hasAirJump() {" line79="        return game.runtime() - this.airJumpTime &lt; this.airJumpTimeMax" line80="    }" line81="" line82="    canAirJump() {" line83="        return this.hasAirJump() &amp;&amp; (this.airJumpCount &lt; this.airJumpCountMax);" line84="    }" line85="" line86="    onGround() {" line87="        return this.sprite.isHittingTile(CollisionDirection.Bottom)" line88="    }" line89="" line90="    timeJumpCharge() {" line91="        return game.runtime() - this.timeJumpStart;" line92="    }" line93="" line94="    releaseJump() {" line95="        if (this.stopped) return;" line96="" line97="        animation.stopAnimation(" line98="            animation.AnimationTypes.ImageAnimation," line99="            this.sprite" line100="        );" line101="        this.sprite.setImage(this.defaultImg)" line102="" line103="        // Need to be on ground (unless air jump active)" line104="        if (!this.canAirJump()) {" line105="            if (!this.onGround())" line106="                return;" line107="        }" line108="" line109="        if (!this.onGround() &amp;&amp; this.canAirJump())" line110="            this.airJumpCount++;" line111="" line112="        let jumpPowerMax = -250 // vy" line113="        let jumpChargeTimeMax = 1000.0 // milliseconds" line114="        let jumpPower = (Math.min(" line115="            this.timeJumpCharge()," line116="            jumpChargeTimeMax" line117="        ) / jumpChargeTimeMax) * jumpPowerMax" line118="        this.sprite.vy = Math.min(this.sprite.vy, jumpPower)" line119="" line120="        music.playSoundEffect(" line121="            music.createSoundEffect(WaveShape.Square, 1902, 253, 88, 7, 250, SoundExpressionEffect.Tremolo, InterpolationCurve.Logarithmic)," line122="            SoundExpressionPlayMode.UntilDone" line123="        );" line124="    }" line125="" line126="    loopCamera() {" line127="        scene.centerCameraAt(6 * 16, this.sprite.y - 16);" line128="    }" line129="" line130="    loopBounds() {" line131="        let leftBound = 8;" line132="        let rightBound = leftBound * 2 + screen.width;" line133="        if (this.sprite.x &lt; leftBound) this.sprite.x = rightBound;" line134="        else if (this.sprite.x &gt; rightBound) this.sprite.x = leftBound;" line135="    }" line136="" line137="    stop() {" line138="        super.stop();" line139="        this.sprite.vx = 0;" line140="        this.sprite.vy = 0;" line141="        this.sprite.ax = 0;" line142="        this.sprite.ay = 0;" line143="    }" line144="" line145="    win() {" line146="        gameMode.stop();" line147="        new ObjMsgWin(this.time());" line148="    }" line149="" line150="    getJellyfish(tileLocation: tiles.Location) {" line151="        tiles.setTileAt(tileLocation, assets.tile`blank`);" line152="        sfxJellyfish();" line153="        this.airJumpTime = game.runtime();" line154="        this.airJumpCount = 0;" line155="        new ObjSparkle(this);" line156="    }" line157="" line158="    getBlowfish(tileLocation: tiles.Location) {" line159="        tiles.setTileAt(tileLocation, assets.tile`blank`);" line160="        sfxBlowfish();" line161="        this.sprite.vy = -300;" line162="        this.airJumpCount = 0;" line163="    }" line164="" line165="    loopTiles() {" line166="        let tileLocation = this.sprite.tilemapLocation();" line167="" line168="        if (tiles.tileAtLocationEquals(tileLocation, assets.tile`zapfish`))" line169="            this.win();" line170="        else if (tiles.tileAtLocationEquals(tileLocation, assets.tile`blowfish`))" line171="            this.getBlowfish(tileLocation);" line172="        else if (tiles.tileAtLocationEquals(tileLocation, assets.tile`jellyfish`))" line173="            this.getJellyfish(tileLocation);" line174="    }" line175="" line176="    loop() {" line177="        if (this.sprite.vy &lt; 0) {" line178="            this.sprite.setFlag(SpriteFlag.GhostThroughWalls, true);" line179="        } else {" line180="            this.sprite.setFlag(SpriteFlag.GhostThroughWalls, false);" line181="        }" line182="" line183="        let squiddyAcc = 100;" line184="        if (this.sprite.isHittingTile(CollisionDirection.Bottom)) {" line185="            if (!this.sprite.tileKindAt(TileDirection.Bottom, assets.tile`ice`)) {" line186="                this.sprite.ax = 0;" line187="                this.sprite.vx = 0;" line188="            }" line189="            this.airJumpCount = 0;" line190="        } if (controller.left.isPressed())" line191="            this.sprite.ax = -squiddyAcc;" line192="        else if (controller.right.isPressed())" line193="            this.sprite.ax = squiddyAcc;" line194="        else" line195="            this.sprite.ax = 0;" line196="" line197="        this.loopBounds();" line198="        this.loopTiles();" line199="    }" line200="" line201="    _cleanup() {" line202="        super._cleanup();" line203="        this.sprite.destroy();" line204="    }" line205="}" numlines="206"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjMsgItem extends Obj{" line1="    x = 0;" line2="    y = 0;" line3="    text = &quot;&quot;;" line4="    _textSprite: TextSprite = null;" line5="" line6="    constructor(x: number, y: number, text: string) {" line7="        super();" line8="        this.x = x;" line9="        this.y = y;" line10="        this.text = text;" line11="    }" line12="" line13="    draw() {" line14="        this._textSprite = textsprite.create(this.text);" line15="        this._textSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line16="        this._textSprite.x = this.x + (screen.width / 2);" line17="        this._textSprite.y = this.y + (screen.height / 2);" line18="        this._textSprite.setMaxFontHeight(6);" line19="    }" line20="" line21="    _cleanup() {" line22="        super._cleanup();" line23="        this._textSprite.destroy();" line24="    }" line25="}" numlines="26"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjMsg extends Obj {" line1="    items: ObjMsgItem[] = [];" line2="    pauseTime = 5000;" line3="" line4="    _bgSprite: Sprite = null;" line5="" line6="    init() { }" line7="    after() { }" line8="" line9="    constructor() {" line10="        super();" line11="        this.init();" line12="" line13="        this._bgSprite = sprites.create(assets.image`msgBg`, SpriteKind.Text);" line14="        this._bgSprite.x = screen.width / 2;" line15="        this._bgSprite.y = screen.height / 2;" line16="        this._bgSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line17="" line18="        this.items.forEach(item =&gt; item.draw());" line19="" line20="        timer.background(() =&gt; {" line21="            pause(this.pauseTime);" line22="            this.after();" line23="            this.destroy();" line24="        })" line25="    }" line26="" line27="    _cleanup() {" line28="        super._cleanup();" line29="        this._bgSprite.destroy();" line30="        this.items.forEach(item =&gt; item.destroy());" line31="    }" line32="}" numlines="33"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjMsgWin extends ObjMsg {" line1="    stageBonus = 300;" line2="    timeBonus = 0;" line3="    time = 0;" line4="" line5="    constructor(time: number) {" line6="        super();" line7="    }" line8="" line9="    newScore() {" line10="        return score + this.stageBonus + this.timeBonus;" line11="    }" line12="" line13="    init() {" line14="        let timeBonusMax = 500;" line15="        let timeBonusWidth = 16;" line16="        let timeBonusStart = 24;" line17="        this.timeBonus = Math.max(" line18="            0," line19="            Math.min(" line20="                timeBonusMax," line21="                (" line22="                    (" line23="                        timeBonusWidth +" line24="                        timeBonusStart -" line25="                        this.time" line26="                    ) / timeBonusWidth" line27="                ) * timeBonusMax" line28="            )" line29="        );" line30="" line31="        let newScore = this.newScore();" line32="        let hiscoreText = `HISCORE ${hiscore}`;" line33="" line34="        if (newScore &gt; hiscore) {" line35="            hiscore = newScore;" line36="            blockSettings.writeNumber(&quot;hiscore&quot;, hiscore)" line37="            hiscoreText = &quot;NEW HISCORE!&quot;;" line38="        }" line39="" line40="        this.pauseTime = 5000;" line41="        this.items = [" line42="            new ObjMsgItem(0, -24, &quot;GOAL!&quot;)," line43="            new ObjMsgItem(0, -12, `STAGE BONUS ${this.stageBonus}`)," line44="            new ObjMsgItem(0, 0, `TIME BONUS ${this.timeBonus}`)," line45="            new ObjMsgItem(0, 12, `TOTAL ${newScore}`)," line46="            new ObjMsgItem(0, 24, hiscoreText)," line47="        ];" line48="        sfxWin();" line49="    }" line50="" line51="    after() {" line52="        score = this.newScore();" line53="        level++;" line54="        gameMode.destroy();" line55="        gameMode = new ObjGameModeMain(tilemapCurrent);" line56="    }" line57="}" numlines="58"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjMsgGameOver extends ObjMsg {" line1="    init() {" line2="        this.pauseTime = 5000;" line3="        this.items = [" line4="            new ObjMsgItem(0, 0, &quot;GAME OVER!&quot;)," line5="        ];" line6="    }" line7="" line8="    after() { game.reset(); }" line9="}" numlines="10"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjMsgMiss extends ObjMsg {" line1="    init() {" line2="        this.pauseTime = 1800;" line3="        this.items = [" line4="            new ObjMsgItem(0, 0, &quot;MISS!&quot;)," line5="        ];" line6="        sfxMiss();" line7="    }" line8="" line9="    after() {" line10="        if (lives == 0) {" line11="            new ObjMsgGameOver();" line12="            return;" line13="        }" line14="        " line15="        lives--;" line16="        gameMode.destroy();" line17="        gameMode = new ObjGameModeMain(tilemapCurrent);" line18="    }" line19="}" numlines="20"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function rightJustify(text: any, length: number, char: string) {" line1="    console.log(convertToText(text));" line2="    let paddingLength = length - convertToText(text).length;" line3="    let padding = repeatChar(paddingLength, char);" line4="    return padding + convertToText(text);" line5="}" numlines="6"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjHUD extends Obj {" line1="    _bgSprite: Sprite = null;" line2="    _timerSprite: TextSprite = null;" line3="    _scoreSprite: TextSprite = null;" line4="    _livesSprites: Sprite[] = [];" line5="    _levelSprite: TextSprite = null;" line6="    sprites: Sprite[] = null;" line7="    player: ObjSquiddy = null;" line8="" line9="    constructor(player: ObjSquiddy) {" line10="        super();" line11="        this.player = player;" line12="        this._bgSprite = sprites.create(assets.image`hudBg`, SpriteKind.Text);" line13="        this._bgSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line14="" line15="        this._timerSprite = textsprite.create(&quot;00:00:00&quot;, 0, 1);" line16="        this._timerSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line17="        this._timerSprite.x = 136;" line18="        this._timerSprite.y = 116;" line19="" line20="        this._levelSprite = textsprite.create(`LEVEL ${level}`, 0, 1);" line21="        this._levelSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line22="        this._levelSprite.x = 22;" line23="        this._levelSprite.y = 116;" line24="" line25="        timer.background(() =&gt; {" line26="            pause(2000);" line27="            this._levelSprite.destroy();" line28="" line29="            this._scoreSprite = textsprite.create(" line30="                rightJustify(score, 8, &quot;0&quot;)," line31="                0, 1" line32="            );" line33="            this._scoreSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line34="            this._scoreSprite.x = 24;" line35="            this._scoreSprite.y = 116;" line36="        });" line37="" line38="        let lifeWidth = 8;" line39="        let livesWidth = lives * lifeWidth;" line40="        for (let i = 0; i &lt; lives; i++) {" line41="            let livesSprite = sprites.create(assets.image`life`, SpriteKind.Text);" line42="            livesSprite.setFlag(SpriteFlag.RelativeToCamera, true);" line43="            livesSprite.x = (screen.width / 2) + (livesWidth / 2) - (i * lifeWidth) - 3;" line44="            livesSprite.y = 116;" line45="            this._livesSprites.push(livesSprite);" line46="        }" line47="    }" line48="" line49="    loop() {" line50="        let time = this.player.time();" line51="        let minutes = Math.floor(time / (60 * 1000));" line52="        let seconds = Math.floor(time / 1000) % 60;" line53="        let centiseconds = Math.floor((time % 1000) / 10);" line54="        let timerText = (" line55="            rightJustify(minutes, 2, &quot;0&quot;) + &quot;:&quot; +" line56="            rightJustify(seconds, 2, &quot;0&quot;) + &quot;:&quot; +" line57="            rightJustify(centiseconds, 2, &quot;0&quot;)" line58="        );" line59="        this._timerSprite.setText(timerText);" line60="" line61="        if (this.player.stopped) this.stop();" line62="    }" line63="" line64="    _cleanup() {" line65="        this._timerSprite.destroy();" line66="        this._scoreSprite.destroy();" line67="        this._livesSprites.forEach(x =&gt; x.destroy());" line68="    }" line69="}" numlines="70"></mutation><next><block type="variables_set"><field name="VAR" id="J*Mu#(oKkr)O.D5^z*AM">tilemapCurrentName</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text"><field name="TEXT">level</field></block></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ObjGameModeMain extends Obj {" line1="    squiddy: ObjSquiddy = null;" line2="    water: ObjWater = null;" line3="    hud: ObjHUD = null;" line4="" line5="    constructor(tilemap: tiles.TileMapData) {" line6="        super();" line7="        " line8="        tilemapCurrent = helpers.getTilemapByName(tilemapCurrentName);" line9="        tiles.setCurrentTilemap(tilemapCurrent);" line10="        scene.setBackgroundColor(8);" line11="        scroller.setLayerImage(" line12="            scroller.BackgroundLayer.Layer0," line13="            assets.image`bg`" line14="        )" line15="        this.squiddy = new ObjSquiddy();" line16="        this.water = new ObjWater();" line17="        this.hud = new ObjHUD(this.squiddy);" line18="" line19="        // Hack to fix camera jitter :)" line20="        game.currentScene().eventContext.registerFrameHandler(" line21="            15," line22="            () =&gt; this.loopBG()" line23="        );" line24="    }" line25="" line26="    getBGPos() {" line27="        return 0 - scene.cameraProperty(CameraProperty.Y) + game.runtime() / 100" line28="    }" line29="" line30="    loopBG() {" line31="        scroller.setBackgroundScrollOffset(0, this.getBGPos())" line32="    }" line33="" line34="    stop() {" line35="        super.stop();" line36="        this.squiddy.stop();" line37="        this.water.stop();" line38="    }" line39="" line40="    _cleanup() {" line41="        super._cleanup();" line42="        this.squiddy.destroy();" line43="        this.water.destroy();" line44="    }" line45="}" numlines="46"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let gameMode = new ObjGameModeMain(assets.tilemap`level`);" numlines="1" declaredvars="gameMode"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" x="613" y="9889"><mutation name="sfxWin" functionid=".z`deKTuuu%xM](,s{v*"></mutation><field name="function_name">sfxWin</field><statement name="STACK"><block type="timer_background"><statement name="HANDLER"><block type="playMelody"><value name="melody"><shadow type="melody_editor"><field name="melody">"G5 -"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">500</field></shadow></value><next><block type="playMelody"><value name="melody"><shadow type="melody_editor"><field name="melody">"G5"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">550</field></shadow></value><next><block type="playMelody"><value name="melody"><shadow type="melody_editor"><field name="melody">"C6"</field></shadow></value><value name="tempo"><shadow type="math_number_minmax"><mutation min="40" max="500" label="Number" precision="0"></mutation><field name="SLIDER">150</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type="function_definition" x="558" y="10296"><mutation name="sfxBlowfish" functionid="%3*$.;U4o.Gi^uqX~b?Q"></mutation><field name="function_name">sfxBlowfish</field><statement name="STACK"><block type="function_call"><mutation name="sfxJellyfish" functionid="f/],NV;5T[=EG(gI-|UG"></mutation><next><block type="timer_background"><statement name="HANDLER"><block type="soundExpression_playSoundEffect"><field name="mode">SoundExpressionPlayMode.UntilDone</field><value name="sound"><shadow type="soundExpression_createSoundEffect"><mutation xmlns="http://www.w3.org/1999/xhtml" _expanded="0" _input_init="true"></mutation><field name="waveShape">WaveShape.Square</field><field name="effect">SoundExpressionEffect.Vibrato</field><field name="interpolation">InterpolationCurve.Linear</field><value name="startFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">208</field></shadow></value><value name="endFrequency"><shadow type="math_number_minmax"><mutation min="0" max="5000" label="Number" precision="0"></mutation><field name="SLIDER">565</field></shadow></value><value name="duration"><shadow type="math_number_minmax"><mutation min="1" max="9999" label="Number" precision="0"></mutation><field name="SLIDER">500</field></shadow></value><value name="startVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">255</field></shadow></value><value name="endVolume"><shadow type="math_number_minmax"><mutation min="0" max="255" label="Number" precision="0"></mutation><field name="SLIDER">88</field></shadow></value></shadow></value></block></statement></block></next></block></statement></block></xml>